# ------------------------------------------------------------
# predefined.py
# All the predefined operators are provided by this file
# ------------------------------------------------------------

import numpy as np
from typing import Dict


predefined_optlib = {
    # unitary
    "I" : np.array(
        [[1., 0.],
        [0., 1.]]
    ),
    
    "X" : np.array(
        [[0., 1.],
        [1., 0.]]
    ),

    "Y" : np.array(
        [[0., -1.j],
        [1.j, 0.]]
    ),

    "Z" : np.array(
        [[1., 0.],
        [0., -1.]]
    ),

    "H" : np.array(
        [[1., 1.],
        [1., -1.]]
    )/np.sqrt(2),

    "CX" : np.array(
        [[1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 0., 1.],
        [0., 0., 1., 0.]]
    ).reshape((2,2,2,2)),

    "CZ" : np.array(
        [[1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., -1.]]
    ).reshape((2,2,2,2)),

    "CH" : np.array(
        [[1., 0., 0., 0.],
        [0., 1., 0., 0.,],
        [0., 0., 1./np.sqrt(2), 1./np.sqrt(2)],
        [0., 0., 1./np.sqrt(2), -1./np.sqrt(2)]]
    ).reshape((2,2,2,2)),

    "SWAP" : np.array(
        [[1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [0., 0., 0., 1.]]
    ).reshape((2,2,2,2)),

    "CCX" : np.array(
        [[1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1.],
        [0., 0., 0., 0., 0., 0., 1., 0.]]
    ).reshape((2,2,2,2,2,2)),
    
    # hermitian operators
    "Idiv2" : np.array(
        [[1., 0.],
        [0., 1.]]
    )/2.,

    "Zero0" : np.zeros((1,1)),

    "Zero" : np.zeros((2,2)),

    "P0" : np.array(
        [[1., 0.],
        [0., 0.]]
    ),

    "P0div2" : np.array(
        [[1., 0.],
        [0., 0.]]
    )/2,

    "P1" : np.array(
        [[0., 0.],
        [0., 1.]]
    ),

    "P1div2" : np.array(
        [[0., 0.],
        [0., 1.]]
    )/2,

    "Pp" : np.array(
        [[0.5, 0.5],
        [0.5, 0.5]]
    ),

    "Ppdiv2" : np.array(
        [[0.5, 0.5],
        [0.5, 0.5]]
    )/2,

    "Pm" : np.array(
        [[0.5, -0.5],
        [-0.5, 0.5]]
    ),

    "Pmdiv2" : np.array(
        [[0.5, -0.5],
        [-0.5, 0.5]]
    )/2,

    # 2 qubits equal on the 01 basis
    "Eq01_2" : np.array(
        [[1., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 1.]]
    ).reshape((2,2,2,2)),
    
    # 2 qubits not equal on the 01 basis
    "Neq01_2" : np.array(
        [[0., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 0.]]
    ).reshape((2,2,2,2)),

    # 3 qubits equal on the 01 basis
    "Eq01_3" : np.array(
        [[1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1.]]
    ).reshape((2,2,2,2,2,2)),
}


# mealib = {
#     # measurements

#     "M01" : np.array(
#         [[[1., 0.],
#         [0., 0.]],

#         [[0., 0.],
#         [0., 1.]]]
#     ),

#     "M10" : np.array(
#         [[[0., 0.],
#         [0., 1.]],

#         [[1., 0.],
#         [0., 0.]]]
#     ),

#     "Mpm" : np.array(
#         [[[0.5, 0.5],
#         [0.5, 0.5]],

#         [[0.5, -0.5],
#         [-0.5, 0.5]]]
#     ),

#     "Mmp" : np.array(
#         [[[0.5, -0.5],
#         [-0.5, 0.5]],

#         [[0.5, 0.5],
#         [0.5, 0.5]]]
#     ),

#     "MEq01_2" : np.array(
#         [[[0., 0., 0., 0.],
#          [0., 1., 0., 0.],
#          [0., 0., 1., 0.],
#          [0., 0., 0., 0.]],

#          [[1., 0., 0., 0.],
#          [0., 0., 0., 0.],
#          [0., 0., 0., 0.],
#          [0., 0., 0., 1.]]]
#     ).reshape((2,2,2,2,2)),

#     "MEq10_2" : np.array(
#        [[[1., 0., 0., 0.],
#          [0., 0., 0., 0.],
#          [0., 0., 0., 0.],
#          [0., 0., 0., 1.]],
#         [[0., 0., 0., 0.],
#          [0., 1., 0., 0.],
#          [0., 0., 1., 0.],
#          [0., 0., 0., 0.]]]
#     ).reshape((2,2,2,2,2)),
# }


# transform to QVal instances

from .val import QVal
from .qopt import QOpt

qvallib : Dict[str, QVal]= {}
for key in predefined_optlib:
    qvallib[key] = QOpt(predefined_optlib[key])